using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using QLNet;

namespace QLyx.Simulation
{
    public class CashManager
    {


        // ************************************************************
        // PROPERTIES    
        // ************************************************************

        // Current balance level
        public double currentBalance() { return _balanceHistory.LastOrDefault().Value; }

        // Maximum amount that can be borrowed (negative balance)
        public double MaxBorrow() { return _maxBorrow; }
        protected double _maxBorrow = double.NegativeInfinity;

        // Cashflows : Cashflows generated by the strategy (coupons, redemption, investments)
        protected Dictionary<DateTime, double> _transactions = new Dictionary<DateTime, double>();

        // Balance : Sum of cashflows (balance)
        protected Dictionary<DateTime, double> _balanceHistory = new Dictionary<DateTime, double>();

        // Deposit rate history
        protected Dictionary<DateTime, double> _rate = new Dictionary<DateTime, double>();
        
        // Day Counter
        public DayCounter dayCounter() { return _dayCounter; }
        protected DayCounter _dayCounter = new Actual365Fixed();

        // Calendar
        public Calendar calendar() { return _calendar; }
        protected Calendar _calendar = new NullCalendar();

        // Business Day Convention
        public BusinessDayConvention bdc() { return _bdc; }
        protected BusinessDayConvention _bdc = BusinessDayConvention.Following;




        // ************************************************************
        // CONSTRUCTORS      
        // ************************************************************

        public CashManager(DateTime date, double initialBalance, double initialInterestRate, double maxBorrow = double.PositiveInfinity)
        {
            // Set initial balance
            _balanceHistory[date] = initialBalance;

            // Set initial deposit rate
            _rate[date] = initialInterestRate;

            // Set maximum borrow
            _maxBorrow = maxBorrow;
        }



        // ************************************************************
        // METHODS    
        // ************************************************************

        // Transaction : deposit & withdrawal
        public void Transaction(DateTime date, double amount)
        {
            // Update transaction records
            if (!_transactions.Keys.Contains(date)) { _transactions[date] = 0.0; }
            _transactions[date] = _transactions[date] + amount;

            // Compute interest rates
            double interestRate;
            DateTime previousDate = _balanceHistory.LastOrDefault().Key;
            if (_rate.Keys.Contains(previousDate)) { interestRate = _rate[previousDate]; }
            else { interestRate = _rate.LastOrDefault().Value; }

            // Compute applicable time
            double yearFraction;
            yearFraction = _dayCounter.yearFraction(new Date(previousDate), new Date(date));

            // Update Balance
            _balanceHistory[date] = _balanceHistory.LastOrDefault().Value * (1.0 + interestRate * yearFraction) + amount;
            if (_balanceHistory[date] < (-1 * _maxBorrow)) { throw new ArgumentException("NegativeCashBalance","Maximum borrowing level exceeded."); }
            
        }


        // Update rate information
        public void UpdateRate(DateTime date, double rate)
        {
            _rate[date] = rate;
        }
        



    }
}
